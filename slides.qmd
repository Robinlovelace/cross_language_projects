---
title: Deploying cross-language in high impact projects
format: 
  revealjs: default
  clean-revealjs:
    self-contained: true
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Robin Lovelace
    orcid: 0000-0001-5679-6536
    email: rob00 x at gmail dot com
    affiliations: University of Leeds, Active Travel England
date: last-modified
bibliography: references.bib
---

# Introduction

## Contents

-   Introduction
-   Approaches to cross-language interoperability
-   Containerisation
-   Cross-language pain points
-   Cross-language priorities

## Case study for reference

::::: columns
::: {.column width="50%"}
The Network Planning Tool for Scotland

-   Development version (branch `dev`): [nptscot.github.io](https://nptscot.github.io/)
-   Stable version (branch `production`): [www.npt.scot](https://www.npt.scot/)
:::

::: {.column width="50%"}
![The NPT web app](/images/basemaps.png)
:::
:::::

## NPT stack

::::: columns
::: column
Backend: R + targets for 'cross-language' data pipeline workflow automation

-   Relies on Rust crates
-   Experiments with Python

Frontend: JS + MapLibre for visualisation

Progressive Web App (PWA)
:::

::: column
![Map controls](/images/map_controls.png)
:::
:::::

## User interface

![Layer Controls](/images/layer_controls.png)

## Definitions

### "Deploying"

-   Code runs on more than one computer
-   Results are published on a website that is maintained
-   Project is "in production"
    -   Users: Hosted on a trusted and well-used website
    -   Performance: updates to 'production' planned and documented
    -   Money changing hands
    -   Expectations

## Deploying the NPT

![](images/paste-7.png)

## Deployment workflow of NPT

Based on [workflow.yml file for](https://github.com/nptscot/nptscot.github.io/blob/production/.github/workflows/azure-static-web-apps-wonderful-beach-0edb91e03.yml) GitHub actions.

![](images/paste-8.png)

## "High impact projects"

-   Broadly: tangible change results from the work
    -   With measurable impact on environmental, social (or economic?) outcomes
        -   E.g. Reduction in greenhouse gas emissions <!-- (accounting for 'rebound' effects) -->
        -   E.g. better diets resulting in more DALYs <!-- (disability-adjusted life years) -->
    -   Identifiable 'pathway to impact'
        -   E.g. New methods -\> new evidence -\> investment in active travel more effective that it would have been otherwise -\> more people cycling -\> tangible benefits

## Technical requirements for impact

-   Users: The web application has users
-   Scale: covers a large geographic area needs big data inputs
-   Trusted: code review and multiple contributors
-   User-friendly: if it's going to have lots of users
-   Future proof: technology needs to last a long time
-   Community: needed to ensure it lasts

## Why cross-language projects?

-   Specific tool written in a particular language (`odjitter`)
-   Required for 'best of both worlds' (JS for visualisation, R for statistical modelling)
-   Having multiple implementations ensures robustness
    -   Aeroplane flight software has 3 implementations
    -   Redundancy common in mission-critical applications

# Approaches to cross-language projects

Checked boxes indicate approaches used in the NPT project.

-   [x] "Loose coupling" (system calls)
-   [x] "Tight coupling" with low-level code embedded in R/Python/other packages (e.g. `sf`, `rsgeo`, `shapely`)
-   [ ] Project environments (e.g. `pixi`, `mamba` [`rix`](https://docs.ropensci.org/rix/))
-   [x] Containerisation

## Loose coupling

Example: [`odjitter`](https://github.com/dabreegster/odjitter/blob/98a7a6e03bc54bc79d3b3abbde91b6f79173ff1a/r/R/jitter.R#L163C1-L180C33) R package

``` r
  msg = glue::glue("{odjitter_location} jitter --od-csv-path {od_csv_path} \\
  --zones-path {zones_path} \\
  --zone-name-key {zone_name_key} \\
  --origin-key {origin_key} \\
  --destination-key {destination_key} \\
  --subpoints-origins-path {subpoints_origins_path} \\
  --subpoints-destinations-path {subpoints_destinations_path} \\
  --disaggregation-key {disaggregation_key} \\
  --disaggregation-threshold {disaggregation_threshold} \\
  --rng-seed {rng_seed} \\
  {deduplicate_pairs}  \\
  --output-path {output_path}")
  if(show_command) {
    message("command sent to the system:")
    cat(msg)
  }
  system(msg)
  res = sf::read_sf(output_path)
```

## Loose coupling

Example: [`qgisprocess` R package](https://github.com/r-spatial/qgisprocess/blob/702358e5849b38a9ce8550ee0f8b465c902d59d4/R/qgis-run.R#L26-L53)

``` r
qgis_run <- function(args = character(), ..., env = qgis_env(), path = qgis_path()) {
  if (is.null(path)) {
    message(
      "The filepath of 'qgis_process' is not present in the package cache, ",
      "so the package is not well configured.\n",
      "Restart R and reload the package; run `qgis_configure()` if needed.\n",
      "For now, will try to fix it on the fly, but some functionality may not work.\n"
    )
    path <- qgis_path(query = TRUE, quiet = FALSE)
    # typically the version will also be missing, so fixing that as well:
    if (is.null(qgisprocess_cache$version)) {
      invisible(qgis_version(query = TRUE, quiet = FALSE))
    }
  }
  # workaround for running Windows batch files where arguments have spaces
  # see https://github.com/r-lib/processx/issues/301
  if (is_windows()) {
    withr::with_envvar(
      env,
      processx::run("cmd.exe", c("/c", "call", path, args), ...),
    )
  } else {
    withr::with_envvar(
      env,
      processx::run(path, args, ...)
    )
  }
}
```

## Tight coupling 1

Source: [`geoarrow-c`](https://github.com/geoarrow/geoarrow-c/blob/main/python/geoarrow-c/src/geoarrow/c/_lib.pyx#L1-L22)

``` py


# cython: language_level = 3
# cython: linetrace=True


"""Low-level geoarrow Python bindings."""


from libc.stdint cimport uint8_t, int32_t, int64_t, uintptr_t
from cpython cimport Py_buffer, PyObject
from libcpp cimport bool
from libcpp.string cimport string


cdef extern from "geoarrow_type.h":
    struct ArrowSchema:
        const char* format
        const char* name
        const char* metadata
        int64_t flags
        int64_t n_children
        ArrowSchema** children
        ArrowSchema* dictionary
        void (*release)(ArrowSchema*)
        void* private_data
```

## Tight coupling 2

Source: [`geoarrow-rs`](https://github.com/geoarrow/geoarrow-rs/blob/db06a8bf4b591b38fc164c29be86c630108751f6/python/pyo3-geoarrow/src/data_type.rs#L1-L29)

``` rust
use crate::error::{PyGeoArrowError, PyGeoArrowResult};
use crate::{PyCoordType, PyDimension};


use geoarrow::array::CoordType;
use geoarrow::datatypes::{Dimension, GeoDataType};
use pyo3::exceptions::PyValueError;
use pyo3::intern;
use pyo3::prelude::*;
use pyo3::types::{PyCapsule, PyType};
use pyo3_arrow::ffi::to_schema_pycapsule;
use pyo3_arrow::PyField;


#[pyclass(module = "geoarrow.rust.core._rust", name = "GeometryType", subclass)]
pub struct PyGeometryType(pub(crate) GeoDataType);


impl PyGeometryType {
    pub fn new(data_type: GeoDataType) -> Self {
        Self(data_type)
    }


    /// Import from a raw Arrow C Schema capsules
    pub fn from_arrow_pycapsule(capsule: &Bound<PyCapsule>) -> PyGeoArrowResult<Self> {
        PyField::from_arrow_pycapsule(capsule)?.try_into()
    }


    pub fn into_inner(self) -> GeoDataType {
        self.0
    }
}
```

## Tight coupling 3

Source: [`RcppExports.R` in `sf`](https://github.com/r-spatial/sf/blob/35f5f8be44e1923d242a489b51d7c58b8397a2a9/R/RcppExports.R#L212-L218)

``` r
CPL_geos_union <- function(sfc, by_feature = FALSE, is_coverage = FALSE) {
    .Call(`_sf_CPL_geos_union`, sfc, by_feature, is_coverage)
}


CPL_geos_snap <- function(sfc0, sfc1, tolerance) {
    .Call(`_sf_CPL_geos_snap`, sfc0, sfc1, tolerance)
}
```

## Tight coupling 4

<!-- https://github.com/paleolimbot/geos/blob/HEAD/R/geos-unary-geometry.R#L153-L169 -->

Source: [`geos-unary-geometry.R` in `geos`](https://github.com/paleolimbot/geos/blob/HEAD/R/geos-unary-geometry.R#L153-L169)

``` r
#' @rdname geos_centroid
#' @export
geos_unary_union <- function(geom) {
  geom <- sanitize_geos_geometry(geom)
  new_geos_geometry(.Call(geos_c_unary_union, geom), crs = attr(geom, "crs", exact = TRUE))
}


#' @rdname geos_centroid
#' @export
geos_unary_union_prec <- function(geom, grid_size) {
  geom <- sanitize_geos_geometry(geom)
  recycled <- recycle_common(list(geom, sanitize_double(grid_size)))
  new_geos_geometry(
    .Call(geos_c_unary_union_prec, recycled[[1]], recycled[[2]]),
    crs = attr(geom, "crs", exact = TRUE)
  )
}
```

## Tight coupling 5

<!-- https://github.com/JuliaGeo/LibGEOS.jl/blob/91f69c04843f02a995c5df54b0186891534a2ef4/src/geos_functions.jl#L712-L726 -->

Source: [`geos_functions.jl` in `LibGEOS.jl`](https://github.com/JuliaGeo/LibGEOS.jl/blob/91f69c04843f02a995c5df54b0186891534a2ef4/src/geos_functions.jl#L712-L726)

``` julia
function union(obj1::Geometry, obj2::Geometry, context::GEOSContext = get_context(obj1))
    result = GEOSUnion_r(context, obj1, obj2)
    if result == C_NULL
        error("LibGEOS: Error in GEOSUnion")
    end
    geomFromGEOS(result, context)
end


function unaryUnion(obj::Geometry, context::GEOSContext = get_context(obj))
    result = GEOSUnaryUnion_r(context, obj)
    if result == C_NULL
        error("LibGEOS: Error in GEOSUnaryUnion")
    end
    geomFromGEOS(result, context)
end
```

## Project environments

``` bash
pixi init test-project --format pyproject
```

```         
✔ Initialized project in ~/test-project
```

``` bash
cd test-project
pixi add geopandas
pixi add --pypi --feature test pytest
pixi install
```

```         
✔ Added pytest
Added these as pypi-dependencies.
Added these only for feature: test
```

Cross-language support (source: [pixi.sh](https://pixi.sh/latest/ide_integration/r_studio/))

``` bash
pixi add r-ggplot2
```

Although some issues according to my tests (see [prefix-dev/pixi#2066](https://github.com/prefix-dev/pixi/issues/2066))

## Pixi disk space usage

```         
114M         ┌── bin                          │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████ │   6%
101M         │         ┌── locale-archive.tmpl│▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████ │   6%
101M         │       ┌─┴ locale               │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████ │   6%
116M         │     ┌─┴ lib64                  │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████ │   7%
142M         │   ┌─┴ usr                      │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██████████ │   8%
148M         │ ┌─┴ sysroot                    │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████████ │   8%
174M         ├─┴ x86_64-conda-linux-gnu       │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████████ │  10%
245M         │     ┌── 14.1.0                 │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█████████████████ │  14%
245M         │   ┌─┴ x86_64-conda-linux-gnu   │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█████████████████ │  14%
246M         │ ┌─┴ gcc                        │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█████████████████ │  14%
246M         ├─┴ libexec                      │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█████████████████ │  14%
108M         │     ┌── 14.1.0                 │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████ │   6%
108M         │   ┌─┴ x86_64-conda-linux-gnu   │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████ │   6%
108M         │ ┌─┴ gcc                        │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████ │   6%
341M         │ │ ┌── site-packages            │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████████████████████ │  19%
391M         │ ├─┴ python3.12                 │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████████████████████████ │  22%
1.0G         ├─┴ lib                          │▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████████████████████████████████████████████████████████████████████ │  58%
1.7G       ┌─┴ default                        │████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████ │ 100%
1.7G     ┌─┴ envs                             │████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████ │ 100%
1.7G   ┌─┴ .pixi   
```

## Containerisation

Source: [github.com/geocompx/docker](https://github.com/geocompx/docker)

![](images/paste-9.png)

## Containerisation 2

Source: [pangeo-data/pangeo-docker-images](https://github.com/pangeo-data/pangeo-docker-images)

![](images/paste-10.png)

## Containerisation 3

Source: <https://github.com/b-data>

![](images/paste-11.png)

# Publishing

## Setting-up `gh-pages` branch

You can do this with a single quarto command:

``` sh
quarto publish gh-pages
```

Which leads to the following text and eventually auto-opens the deployed webiste!

![](images/paste-4.png)

## The website

The previous command creates a `gh-pages` branch with the slides in the `docs` folder.
This is then automatically deployed to GitHub Pages, and the website is opened in your browser when ready:

![](images/paste-5.png)

How awesome is that?

### 🤯🤯🤯

## Debugging

Source of `quarto publish gh-pages` hint: [Error message from GitHub Actions](https://github.com/Robinlovelace/reproducible-slides-repo-template/actions/runs/10860601182/job/30141397336#step:4:34) when trying to publish slides to GitHub Pages:

```         
ERROR: Unable to publish to GitHub Pages (the remote origin does not have a branch named "gh-pages". Use first `quarto publish gh-pages` locally to initialize the remote repository for publishing.)
```

![](images/paste-3.png)

# Adding citations {background-color="#40666e"}

## With the Quarto extension

-   You need to be in Visual Editor mode (Ctrl+Shift+F4)
-   Then it's Ctrl+Shift+F8

![](images/paste-2.png)

Creates citations like this: [@peng2011]

## With "Citation Picker for Zotero" extension

-   Issue with this approach: doesn't generate the .bib file

![](images/paste-1.png)

Alt+Shift+Z

## Support in IDEs

![](images/paste-6.png)

# References